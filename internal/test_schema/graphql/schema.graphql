# Code generated by github.com/lolopinto/ent/ent, DO NOT edit. 


type AdminBlockResponse {
    success: Boolean
}

type AuthUserResult {
    token: String!
    user: User
}

interface Connection {
    edges: [Edge!]
    nodes: [Node!]
}

type Contact implements Node {
    allowList: [User!]!
    contactBar(foo: Int!): Int!
    contactEmails: [ContactEmail!]!
    contactFoo: String!
    emailAddress: String!
    firstName: String!
    id: ID!
    lastName: String!
    userID: String!
}

input ContactCreateInput {
    emailAddress: String!
    favorite: Boolean
    firstName: String!
    lastName: String!
    numberOfCalls: Int
    pi: Float
    userID: String!
}

type ContactCreateResponse {
    contact: Contact
}

type ContactEmail implements Node {
    contact: Contact
    emailAddress: String!
    id: ID!
    label: String!
}

interface Edge {
    node: Node!
}

type Event implements Node {
    attending: [User!]!
    creator: User
    declined: [User!]!
    endTime: Time
    hosts: [User!]!
    id: ID!
    invited: [User!]!
    location: String!
    name: String!
    startTime: Time!
    user: User
    viewerRsvpStatus: EventRsvpStatus
}

input EventCreateInput {
    endTime: Time
    location: String!
    name: String!
    startTime: Time!
    userID: String!
}

type EventCreateResponse {
    event: Event
}

enum EventRsvpStatus {
    EVENT_ATTENDING
    EVENT_DECLINED
    EVENT_INVITED
    EVENT_UNKNOWN
}

input EventRsvpStatusEditInput {
    eventID: ID!
    rsvpStatus: String!
    userID: String!
}

type EventRsvpStatusEditResponse {
    event: Event
}

type EventsConnection implements Connection {
    edges: [EventsEdge!]
    nodes: [Event!]
}

type EventsEdge implements Edge {
    node: Event!
}

type LogEvent2Response {
    success: Boolean
}

type LogEventResponse {
    success: Boolean
}

type Mutation {
    adminBlock(blockerID: ID!, blockeeID: ID!): AdminBlockResponse
    contactCreate(input: ContactCreateInput!): ContactCreateResponse
    eventCreate(input: EventCreateInput!): EventCreateResponse
    eventRsvpStatusEdit(input: EventRsvpStatusEditInput!): EventRsvpStatusEditResponse
    logEvent(event: String!): LogEventResponse
    logEvent2(event: String!): LogEvent2Response
    userAddFamilyMember(input: UserAddFamilyMemberInput!): UserAddFamilyMemberResponse
    userAddFriend(input: UserAddFriendInput!): UserAddFriendResponse
    userCreate(input: UserCreateInput!): UserCreateResponse
    userDelete(input: UserDeleteInput!): UserDeleteResponse
    userEdit(input: UserEditInput!): UserEditResponse
    userRemoveFamilyMember(input: UserRemoveFamilyMemberInput!): UserRemoveFamilyMemberResponse
    userRemoveFriend(input: UserRemoveFriendInput!): UserRemoveFriendResponse
    viewerBlock(userID: ID!): ViewerBlockResponse
    viewerBlockMultiple(userIDs: [ID!]!): ViewerBlockMultipleResponse
    viewerBlockMultipleIDs(userIDs: [String!]!): ViewerBlockMultipleIDsResponse
}

interface Node {
    id: ID!
}

type Query {
    authUser(email: String!, password: String!): AuthUserResult
    contact(id: ID!): Contact
    contactEmail(id: ID!): ContactEmail
    event(id: ID!): Event
    serverTime: Time!
    user(id: ID!): User
}

type User implements Node {
    baz: Float
    bio: String
    contacts: [Contact!]!
    declinedEvents: [Event!]!
    emailAddress: String!
    events: [Event!]!
    eventsAttending: [Event!]!
    familyMembers: [User!]!
    firstName: String!
    friends: [User!]!
    id: ID!
    invitedEvents: [Event!]!
    lastName: String!
    userFoo: String!
}

input UserAddFamilyMemberInput {
    familyMemberID: ID!
    userID: ID!
}

type UserAddFamilyMemberResponse {
    user: User
}

input UserAddFriendInput {
    friendID: ID!
    userID: ID!
}

type UserAddFriendResponse {
    user: User
}

input UserCreateInput {
    bio: String
    emailAddress: String!
    firstName: String!
    lastName: String!
}

type UserCreateResponse {
    user: User
}

input UserDeleteInput {
    userID: ID!
}

type UserDeleteResponse {
    deletedUserId: ID
}

input UserEditInput {
    bio: String
    emailAddress: String!
    firstName: String!
    lastName: String!
    userID: ID!
}

type UserEditResponse {
    user: User
}

input UserRemoveFamilyMemberInput {
    familyMemberID: ID!
    userID: ID!
}

type UserRemoveFamilyMemberResponse {
    user: User
}

input UserRemoveFriendInput {
    friendID: ID!
    userID: ID!
}

type UserRemoveFriendResponse {
    user: User
}

type UsersConnection implements Connection {
    edges: [UsersEdge!]
    nodes: [User!]
}

type UsersEdge implements Edge {
    node: User!
}

type ViewerBlockMultipleIDsResponse {
    success: Boolean
}

type ViewerBlockMultipleResponse {
    success: Boolean
}

type ViewerBlockResponse {
    viewerr: User
}


scalar Time
