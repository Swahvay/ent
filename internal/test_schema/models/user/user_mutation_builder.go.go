// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package user

import (
	"errors"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type UserMutationBuilder struct {
	builder      *actions.EntMutationBuilder
	user         *models.User
	emailAddress *string
	firstName    *string
	lastName     *string
	bio          *string
}

func NewMutationBuilder(
	viewer viewer.ViewerContext,
	operation ent.WriteOperation,
	fieldMap ent.ActionFieldMap,
	opts ...func(*actions.EntMutationBuilder),
) *UserMutationBuilder {
	var user models.User
	b := actions.NewMutationBuilder(
		viewer,
		operation,
		&user,
		&configs.UserConfig{},
		opts...,
	)
	b.FieldMap = fieldMap
	return &UserMutationBuilder{
		builder: b,
		user:    &user,
	}
}

func (b *UserMutationBuilder) SetEmailAddress(emailAddress string) *UserMutationBuilder {
	b.emailAddress = &emailAddress
	b.builder.SetField("EmailAddress", emailAddress)
	return b
}

func (b *UserMutationBuilder) SetFirstName(firstName string) *UserMutationBuilder {
	b.firstName = &firstName
	b.builder.SetField("FirstName", firstName)
	return b
}

func (b *UserMutationBuilder) SetLastName(lastName string) *UserMutationBuilder {
	b.lastName = &lastName
	b.builder.SetField("LastName", lastName)
	return b
}

func (b *UserMutationBuilder) SetBio(bio string) *UserMutationBuilder {
	b.bio = &bio
	b.builder.SetField("Bio", bio)
	return b
}

func (b *UserMutationBuilder) SetNilableBio(bio *string) *UserMutationBuilder {
	b.bio = bio
	if bio == nil {
		b.builder.SetField("Bio", nil)
	} else {
		b.builder.SetField("Bio", *bio)
	}
	return b
}

func (b *UserMutationBuilder) GetEmailAddress() string {
	if b.emailAddress == nil {
		return ""
	}
	return *b.emailAddress
}

func (b *UserMutationBuilder) GetFirstName() string {
	if b.firstName == nil {
		return ""
	}
	return *b.firstName
}

func (b *UserMutationBuilder) GetLastName() string {
	if b.lastName == nil {
		return ""
	}
	return *b.lastName
}

func (b *UserMutationBuilder) GetBio() *string {
	if b.bio == nil {
		return nil
	}
	return b.bio
}

// AddEvents adds an instance of Event to the Events edge while editing the Event ent
func (b *UserMutationBuilder) AddEvents(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.AddEventsID(event.ID)
	}
	return b
}

// AddEventsID adds an instance of Event to the Events edge while editing the Event ent
func (b *UserMutationBuilder) AddEventsID(eventID string, options ...func(*ent.EdgeOperation)) *UserMutationBuilder {
	b.builder.AddOutboundEdge(models.UserToEventsEdge, eventID, models.EventType, options...)
	return b
}

// AddFamilyMembers adds an instance of User to the FamilyMembers edge while editing the User ent
func (b *UserMutationBuilder) AddFamilyMembers(users ...*models.User) *UserMutationBuilder {
	for _, user := range users {
		b.AddFamilyMembersID(user.ID)
	}
	return b
}

// AddFamilyMembersID adds an instance of User to the FamilyMembers edge while editing the User ent
func (b *UserMutationBuilder) AddFamilyMembersID(userID string, options ...func(*ent.EdgeOperation)) *UserMutationBuilder {
	b.builder.AddOutboundEdge(models.UserToFamilyMembersEdge, userID, models.UserType, options...)
	return b
}

// AddFriends adds an instance of User to the Friends edge while editing the User ent
func (b *UserMutationBuilder) AddFriends(users ...*models.User) *UserMutationBuilder {
	for _, user := range users {
		b.AddFriendsID(user.ID)
	}
	return b
}

// AddFriendsID adds an instance of User to the Friends edge while editing the User ent
func (b *UserMutationBuilder) AddFriendsID(userID string, options ...func(*ent.EdgeOperation)) *UserMutationBuilder {
	b.builder.AddOutboundEdge(models.UserToFriendsEdge, userID, models.UserType, options...)
	return b
}

// AddInvitedEvents adds an instance of Event to the InvitedEvents edge while editing the Event ent
func (b *UserMutationBuilder) AddInvitedEvents(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.AddInvitedEventsID(event.ID)
	}
	return b
}

// AddInvitedEventsID adds an instance of Event to the InvitedEvents edge while editing the Event ent
func (b *UserMutationBuilder) AddInvitedEventsID(eventID string, options ...func(*ent.EdgeOperation)) *UserMutationBuilder {
	b.builder.AddOutboundEdge(models.UserToInvitedEventsEdge, eventID, models.EventType, options...)
	return b
}

// AddEventsAttending adds an instance of Event to the EventsAttending edge while editing the Event ent
func (b *UserMutationBuilder) AddEventsAttending(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.AddEventsAttendingID(event.ID)
	}
	return b
}

// AddEventsAttendingID adds an instance of Event to the EventsAttending edge while editing the Event ent
func (b *UserMutationBuilder) AddEventsAttendingID(eventID string, options ...func(*ent.EdgeOperation)) *UserMutationBuilder {
	b.builder.AddOutboundEdge(models.UserToEventsAttendingEdge, eventID, models.EventType, options...)
	return b
}

// AddDeclinedEvents adds an instance of Event to the DeclinedEvents edge while editing the Event ent
func (b *UserMutationBuilder) AddDeclinedEvents(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.AddDeclinedEventsID(event.ID)
	}
	return b
}

// AddDeclinedEventsID adds an instance of Event to the DeclinedEvents edge while editing the Event ent
func (b *UserMutationBuilder) AddDeclinedEventsID(eventID string, options ...func(*ent.EdgeOperation)) *UserMutationBuilder {
	b.builder.AddOutboundEdge(models.UserToDeclinedEventsEdge, eventID, models.EventType, options...)
	return b
}

// RemoveEvents adds an instance of Event to the Events edge while editing the Event ent
func (b *UserMutationBuilder) RemoveEvents(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.builder.RemoveOutboundEdge(models.UserToEventsEdge, event.ID, models.EventType)
	}
	return b
}

// RemoveEventsID adds an instance of Event to the Events edge while editing the Event ent
func (b *UserMutationBuilder) RemoveEventsID(eventID string) *UserMutationBuilder {
	b.builder.RemoveOutboundEdge(models.UserToEventsEdge, eventID, models.EventType)
	return b
}

// RemoveFamilyMembers adds an instance of User to the FamilyMembers edge while editing the User ent
func (b *UserMutationBuilder) RemoveFamilyMembers(users ...*models.User) *UserMutationBuilder {
	for _, user := range users {
		b.builder.RemoveOutboundEdge(models.UserToFamilyMembersEdge, user.ID, models.UserType)
	}
	return b
}

// RemoveFamilyMembersID adds an instance of User to the FamilyMembers edge while editing the User ent
func (b *UserMutationBuilder) RemoveFamilyMembersID(userID string) *UserMutationBuilder {
	b.builder.RemoveOutboundEdge(models.UserToFamilyMembersEdge, userID, models.UserType)
	return b
}

// RemoveFriends adds an instance of User to the Friends edge while editing the User ent
func (b *UserMutationBuilder) RemoveFriends(users ...*models.User) *UserMutationBuilder {
	for _, user := range users {
		b.builder.RemoveOutboundEdge(models.UserToFriendsEdge, user.ID, models.UserType)
	}
	return b
}

// RemoveFriendsID adds an instance of User to the Friends edge while editing the User ent
func (b *UserMutationBuilder) RemoveFriendsID(userID string) *UserMutationBuilder {
	b.builder.RemoveOutboundEdge(models.UserToFriendsEdge, userID, models.UserType)
	return b
}

// RemoveInvitedEvents adds an instance of Event to the InvitedEvents edge while editing the Event ent
func (b *UserMutationBuilder) RemoveInvitedEvents(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.builder.RemoveOutboundEdge(models.UserToInvitedEventsEdge, event.ID, models.EventType)
	}
	return b
}

// RemoveInvitedEventsID adds an instance of Event to the InvitedEvents edge while editing the Event ent
func (b *UserMutationBuilder) RemoveInvitedEventsID(eventID string) *UserMutationBuilder {
	b.builder.RemoveOutboundEdge(models.UserToInvitedEventsEdge, eventID, models.EventType)
	return b
}

// RemoveEventsAttending adds an instance of Event to the EventsAttending edge while editing the Event ent
func (b *UserMutationBuilder) RemoveEventsAttending(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.builder.RemoveOutboundEdge(models.UserToEventsAttendingEdge, event.ID, models.EventType)
	}
	return b
}

// RemoveEventsAttendingID adds an instance of Event to the EventsAttending edge while editing the Event ent
func (b *UserMutationBuilder) RemoveEventsAttendingID(eventID string) *UserMutationBuilder {
	b.builder.RemoveOutboundEdge(models.UserToEventsAttendingEdge, eventID, models.EventType)
	return b
}

// RemoveDeclinedEvents adds an instance of Event to the DeclinedEvents edge while editing the Event ent
func (b *UserMutationBuilder) RemoveDeclinedEvents(events ...*models.Event) *UserMutationBuilder {
	for _, event := range events {
		b.builder.RemoveOutboundEdge(models.UserToDeclinedEventsEdge, event.ID, models.EventType)
	}
	return b
}

// RemoveDeclinedEventsID adds an instance of Event to the DeclinedEvents edge while editing the Event ent
func (b *UserMutationBuilder) RemoveDeclinedEventsID(eventID string) *UserMutationBuilder {
	b.builder.RemoveOutboundEdge(models.UserToDeclinedEventsEdge, eventID, models.EventType)
	return b
}

func (b *UserMutationBuilder) Validate() error {
	return b.builder.Validate()
}

func (b *UserMutationBuilder) GetViewer() viewer.ViewerContext {
	return b.builder.GetViewer()
}

func (b *UserMutationBuilder) GetUser() *models.User {
	return b.user
}

func (b *UserMutationBuilder) SetTriggers(triggers []actions.Trigger) error {
	b.builder.SetTriggers(triggers)
	for _, t := range triggers {
		trigger, ok := t.(UserTrigger)
		if !ok {
			return errors.New("invalid trigger")
		}
		trigger.SetBuilder(b)
	}
	return nil
}

// SetObservers sets the builder on an observer. Unlike SetTriggers, it's not required that observers implement the UserObserver
// interface since there's expected to be more reusability here e.g. generic logging, generic send text observer etc
func (b *UserMutationBuilder) SetObservers(observers []actions.Observer) error {
	b.builder.SetObservers(observers)
	for _, o := range observers {
		observer, ok := o.(UserObserver)
		if ok {
			observer.SetBuilder(b)
		}
	}
	return nil
}

func (b *UserMutationBuilder) GetChangeset() (ent.Changeset, error) {
	return b.builder.GetChangeset()
}

func (b *UserMutationBuilder) ExistingEnt() ent.Entity {
	return b.builder.ExistingEnt()
}

func (b *UserMutationBuilder) Entity() ent.Entity {
	return b.builder.Entity()
}

func (b *UserMutationBuilder) GetOperation() ent.WriteOperation {
	return b.builder.GetOperation()
}

func (b *UserMutationBuilder) GetPlaceholderID() string {
	return b.builder.GetPlaceholderID()
}

var _ ent.MutationBuilder = &UserMutationBuilder{}

type UserTrigger interface {
	SetBuilder(*UserMutationBuilder)
}

type UserMutationBuilderTrigger struct {
	Builder *UserMutationBuilder
}

func (trigger *UserMutationBuilderTrigger) SetBuilder(b *UserMutationBuilder) {
	trigger.Builder = b
}

type UserObserver interface {
	SetBuilder(*UserMutationBuilder)
}

type UserMutationBuilderObserver struct {
	Builder *UserMutationBuilder
}

func (observer *UserMutationBuilderObserver) SetBuilder(b *UserMutationBuilder) {
	observer.Builder = b
}
