// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package action

import (
	"context"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type EditUserAction struct {
	builder *actions.EntMutationBuilder
	user    models.User
}

// EditUserFromContext is the factory method to get an ...
func EditUserFromContext(ctx context.Context, user *models.User) *EditUserAction {
	v, err := viewer.ForContext(ctx)
	if err != nil {
		panic("tried to perform mutation without a viewer")
	}
	return EditUser(v, user)
}

// EditUser is the factory method to get an ...
func EditUser(viewer viewer.ViewerContext, user *models.User) *EditUserAction {
	builder := &actions.EntMutationBuilder{
		Viewer:         viewer,
		EntConfig:      &configs.UserConfig{},
		Operation:      ent.EditOperation,
		ExistingEntity: user,
	}
	action := &EditUserAction{}
	builder.FieldMap = action.getFieldMap()
	action.builder = builder
	return action
}

func (action *EditUserAction) GetViewer() viewer.ViewerContext {
	return action.builder.GetViewer()
}

func (action *EditUserAction) GetChangeset() (ent.Changeset, error) {
	return action.builder.GetChangeset(action.Entity())
}

func (action *EditUserAction) Entity() ent.Entity {
	return &action.user
}

// SetEmailAddress sets the EmailAddress while editing the User ent
func (action *EditUserAction) SetEmailAddress(emailAddress string) *EditUserAction {
	action.builder.SetField("EmailAddress", emailAddress)
	return action
}

// SetFirstName sets the FirstName while editing the User ent
func (action *EditUserAction) SetFirstName(firstName string) *EditUserAction {
	action.builder.SetField("FirstName", firstName)
	return action
}

// SetLastName sets the LastName while editing the User ent
func (action *EditUserAction) SetLastName(lastName string) *EditUserAction {
	action.builder.SetField("LastName", lastName)
	return action
}

// getFieldMap returns the fields that could be edited in this mutation
func (action *EditUserAction) getFieldMap() ent.MutationFieldMap {
	return ent.MutationFieldMap{
		"EmailAddress": &ent.MutatingFieldInfo{
			DB:       "email_address",
			Required: false,
		},
		"FirstName": &ent.MutatingFieldInfo{
			DB:       "first_name",
			Required: false,
		},
		"LastName": &ent.MutatingFieldInfo{
			DB:       "last_name",
			Required: false,
		},
	}
}

// Validate returns an error if the current state of the action is not valid
func (action *EditUserAction) Validate() error {
	return action.builder.Validate()
}

// Save is the method called to execute this action and save change
func (action *EditUserAction) Save() (*models.User, error) {
	err := actions.Save(action)
	return &action.user, err
}

var _ actions.Action = &EditUserAction{}
