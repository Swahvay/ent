// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package action

import (
	"context"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type DeleteUserAction struct {
	builder *actions.EntMutationBuilder
}

// DeleteUserFromContext is the factory method to get an ...
func DeleteUserFromContext(ctx context.Context, user *models.User) *DeleteUserAction {
	v, err := viewer.ForContext(ctx)
	if err != nil {
		panic("tried to perform mutation without a viewer")
	}
	return DeleteUser(v, user)
}

// DeleteUser is the factory method to get an ...
func DeleteUser(viewer viewer.ViewerContext, user *models.User) *DeleteUserAction {
	builder := &actions.EntMutationBuilder{
		Viewer:         viewer,
		EntConfig:      &configs.UserConfig{},
		Operation:      ent.DeleteOperation,
		ExistingEntity: user,
	}
	action := &DeleteUserAction{}
	builder.FieldMap = action.getFieldMap()
	action.builder = builder
	return action
}

func (action *DeleteUserAction) GetViewer() viewer.ViewerContext {
	return action.builder.GetViewer()
}

func (action *DeleteUserAction) GetChangeset() (ent.Changeset, error) {
	return action.builder.GetChangeset(action.Entity())
}

func (action *DeleteUserAction) Entity() ent.Entity {
	return nil
}

// getFieldMap returns the fields that could be edited in this mutation
func (action *DeleteUserAction) getFieldMap() ent.MutationFieldMap {
	return ent.MutationFieldMap{}
}

// Validate returns an error if the current state of the action is not valid
func (action *DeleteUserAction) Validate() error {
	return action.builder.Validate()
}

// Save is the method called to execute this action and save change
func (action *DeleteUserAction) Save() error {
	return actions.Save(action)
}

var _ actions.Action = &DeleteUserAction{}
