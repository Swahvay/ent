// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package contact

import (
	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type ContactMutationBuilder struct {
	builder       *actions.EntMutationBuilder
	contact       models.Contact
	emailAddress  *string
	firstName     *string
	lastName      *string
	userID        *string
	userIDBuilder ent.MutationBuilder
	favorite      *bool
	numberOfCalls *int
	pi            *float64
}

func NewMutationBuilder(
	viewer viewer.ViewerContext,
	operation ent.WriteOperation,
	fieldMap ent.ActionFieldMap,
	opts ...func(*actions.EntMutationBuilder),
) *ContactMutationBuilder {
	b := actions.NewMutationBuilder(
		viewer,
		operation,
		&configs.ContactConfig{},
		opts...,
	)
	b.FieldMap = fieldMap
	return &ContactMutationBuilder{
		builder: b,
	}
}

func (b *ContactMutationBuilder) SetEmailAddress(emailAddress string) *ContactMutationBuilder {
	b.emailAddress = &emailAddress
	return b
}

func (b *ContactMutationBuilder) SetFirstName(firstName string) *ContactMutationBuilder {
	b.firstName = &firstName
	return b
}

func (b *ContactMutationBuilder) SetLastName(lastName string) *ContactMutationBuilder {
	b.lastName = &lastName
	return b
}

func (b *ContactMutationBuilder) SetUserID(userID string) *ContactMutationBuilder {
	b.userID = &userID
	return b
}

func (b *ContactMutationBuilder) SetUserIDBuilder(builder ent.MutationBuilder) *ContactMutationBuilder {
	b.userIDBuilder = builder
	return b
}

func (b *ContactMutationBuilder) SetFavorite(favorite bool) *ContactMutationBuilder {
	b.favorite = &favorite
	return b
}

func (b *ContactMutationBuilder) SetNumberOfCalls(numberOfCalls int) *ContactMutationBuilder {
	b.numberOfCalls = &numberOfCalls
	return b
}

func (b *ContactMutationBuilder) SetPi(pi float64) *ContactMutationBuilder {
	b.pi = &pi
	return b
}

func (b *ContactMutationBuilder) GetEmailAddress() string {
	if b.emailAddress == nil {
		return ""
	}
	return *b.emailAddress
}

func (b *ContactMutationBuilder) GetFirstName() string {
	if b.firstName == nil {
		return ""
	}
	return *b.firstName
}

func (b *ContactMutationBuilder) GetLastName() string {
	if b.lastName == nil {
		return ""
	}
	return *b.lastName
}

func (b *ContactMutationBuilder) GetUserID() string {
	if b.userID == nil {
		return ""
	}

	if b.userIDBuilder != nil {
		return b.userIDBuilder.GetPlaceholderID()
	}
	return *b.userID
}

func (b *ContactMutationBuilder) GetFavorite() bool {
	if b.favorite == nil {
		return false
	}
	return *b.favorite
}

func (b *ContactMutationBuilder) GetNumberOfCalls() int {
	if b.numberOfCalls == nil {
		return 0
	}
	return *b.numberOfCalls
}

func (b *ContactMutationBuilder) GetPi() float64 {
	if b.pi == nil {
		return 0.0
	}
	return *b.pi
}

// AddAllowList adds an instance of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) AddAllowList(users ...*models.User) *ContactMutationBuilder {
	for _, user := range users {
		b.AddAllowListID(user.ID)
	}
	return b
}

// AddAllowListID adds an instance of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) AddAllowListID(userID string, options ...func(*ent.EdgeOperation)) *ContactMutationBuilder {
	b.builder.AddOutboundEdge(models.ContactToAllowListEdge, userID, models.UserType, options...)
	return b
}

// RemoveAllowList adds an instance of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) RemoveAllowList(users ...*models.User) *ContactMutationBuilder {
	for _, user := range users {
		b.builder.RemoveOutboundEdge(models.ContactToAllowListEdge, user.ID, models.UserType)
	}
	return b
}

// RemoveAllowListID adds an instance of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) RemoveAllowListID(userID string) *ContactMutationBuilder {
	b.builder.RemoveOutboundEdge(models.ContactToAllowListEdge, userID, models.UserType)
	return b
}

func (b *ContactMutationBuilder) setFields() {
	// TODO set flag to prevent double writing
	if b.emailAddress != nil {
		b.builder.SetField("EmailAddress", *b.emailAddress)
	}
	if b.firstName != nil {
		b.builder.SetField("FirstName", *b.firstName)
	}
	if b.lastName != nil {
		b.builder.SetField("LastName", *b.lastName)
	}
	if b.userID != nil {
		b.builder.SetField("UserID", *b.userID)
	}
	if b.userIDBuilder != nil {
		b.builder.SetField("UserID", b.userIDBuilder)
	}
	if b.favorite != nil {
		b.builder.SetField("Favorite", *b.favorite)
	}
	if b.numberOfCalls != nil {
		b.builder.SetField("NumberOfCalls", *b.numberOfCalls)
	}
	if b.pi != nil {
		b.builder.SetField("Pi", *b.pi)
	}
}

func (b *ContactMutationBuilder) Validate() error {
	b.setFields()
	// TODO...
	return b.builder.Validate()
}

func (b *ContactMutationBuilder) GetViewer() viewer.ViewerContext {
	return b.builder.GetViewer()
}

func (b *ContactMutationBuilder) GetContact() *models.Contact {
	return &b.contact
}

func (b *ContactMutationBuilder) SetTriggers(triggers []actions.Trigger) {
	b.builder.SetTriggers(triggers)
}

func (b *ContactMutationBuilder) GetChangeset(_ ent.Entity) (ent.Changeset, error) {

	b.setFields()
	return b.builder.GetChangeset(&b.contact)
}

func (b *ContactMutationBuilder) ExistingEnt() ent.Entity {
	return b.builder.ExistingEnt()
}

func (b *ContactMutationBuilder) GetOperation() ent.WriteOperation {
	return b.builder.GetOperation()
}

func (b *ContactMutationBuilder) GetPlaceholderID() string {
	return b.builder.GetPlaceholderID()
}

var _ ent.MutationBuilder = &ContactMutationBuilder{}

type ContactTrigger interface {
	SetBuilder(*ContactMutationBuilder)
}

type ContactMutationBuilderTrigger struct {
	Builder *ContactMutationBuilder
}

func (trigger *ContactMutationBuilderTrigger) SetBuilder(b *ContactMutationBuilder) {
	trigger.Builder = b
}
