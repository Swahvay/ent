// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package address

import (
	"errors"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type AddressMutationBuilder struct {
	builder       *actions.EntMutationBuilder
	address       *models.Address
	city          *string
	residentNames *[]string
	state         *string
	zip           *string
	streetAddress *string
	country       *string
}

func NewMutationBuilder(
	v viewer.ViewerContext,
	operation ent.WriteOperation,
	fieldMap ent.ActionFieldMap,
	opts ...func(*actions.EntMutationBuilder),
) *AddressMutationBuilder {
	var address models.Address
	b := actions.NewMutationBuilder(
		v,
		operation,
		&address,
		&configs.AddressConfig{},
		opts...,
	)
	b.FieldMap = fieldMap
	return &AddressMutationBuilder{
		builder: b,
		address: &address,
	}
}

func (b *AddressMutationBuilder) SetCity(city string) *AddressMutationBuilder {
	b.city = &city
	b.builder.SetField("City", city)
	return b
}

func (b *AddressMutationBuilder) SetResidentNames(residentNames []string) *AddressMutationBuilder {
	b.residentNames = &residentNames
	b.builder.SetField("ResidentNames", residentNames)
	return b
}

func (b *AddressMutationBuilder) SetState(state string) *AddressMutationBuilder {
	b.state = &state
	b.builder.SetField("State", state)
	return b
}

func (b *AddressMutationBuilder) SetZip(zip string) *AddressMutationBuilder {
	b.zip = &zip
	b.builder.SetField("Zip", zip)
	return b
}

func (b *AddressMutationBuilder) SetStreetAddress(streetAddress string) *AddressMutationBuilder {
	b.streetAddress = &streetAddress
	b.builder.SetField("StreetAddress", streetAddress)
	return b
}

func (b *AddressMutationBuilder) SetCountry(country string) *AddressMutationBuilder {
	b.country = &country
	b.builder.SetField("Country", country)
	return b
}

func (b *AddressMutationBuilder) GetCity() string {
	if b.city == nil {
		return ""
	}
	return *b.city
}

func (b *AddressMutationBuilder) GetResidentNames() []string {
	if b.residentNames == nil {
		return nil
	}
	return *b.residentNames
}

func (b *AddressMutationBuilder) GetState() string {
	if b.state == nil {
		return ""
	}
	return *b.state
}

func (b *AddressMutationBuilder) GetZip() string {
	if b.zip == nil {
		return ""
	}
	return *b.zip
}

func (b *AddressMutationBuilder) GetStreetAddress() string {
	if b.streetAddress == nil {
		return ""
	}
	return *b.streetAddress
}

func (b *AddressMutationBuilder) GetCountry() string {
	if b.country == nil {
		return ""
	}
	return *b.country
}

func (b *AddressMutationBuilder) Validate() error {
	return b.builder.Validate()
}

func (b *AddressMutationBuilder) GetViewer() viewer.ViewerContext {
	return b.builder.GetViewer()
}

func (b *AddressMutationBuilder) GetAddress() *models.Address {
	return b.address
}

func (b *AddressMutationBuilder) SetTriggers(triggers []actions.Trigger) error {
	b.builder.SetTriggers(triggers)
	for _, t := range triggers {
		trigger, ok := t.(AddressTrigger)
		if !ok {
			return errors.New("invalid trigger")
		}
		trigger.SetBuilder(b)
	}
	return nil
}

// SetObservers sets the builder on an observer. Unlike SetTriggers, it's not required that observers implement the AddressObserver
// interface since there's expected to be more reusability here e.g. generic logging, generic send text observer etc
func (b *AddressMutationBuilder) SetObservers(observers []actions.Observer) error {
	b.builder.SetObservers(observers)
	for _, o := range observers {
		observer, ok := o.(AddressObserver)
		if ok {
			observer.SetBuilder(b)
		}
	}
	return nil
}

func (b *AddressMutationBuilder) GetChangeset() (ent.Changeset, error) {
	return b.builder.GetChangeset()
}

func (b *AddressMutationBuilder) ExistingEnt() ent.Entity {
	return b.builder.ExistingEnt()
}

func (b *AddressMutationBuilder) Entity() ent.Entity {
	return b.builder.Entity()
}

func (b *AddressMutationBuilder) GetOperation() ent.WriteOperation {
	return b.builder.GetOperation()
}

func (b *AddressMutationBuilder) GetPlaceholderID() string {
	return b.builder.GetPlaceholderID()
}

var _ ent.MutationBuilder = &AddressMutationBuilder{}

type AddressTrigger interface {
	SetBuilder(*AddressMutationBuilder)
}

type AddressMutationBuilderTrigger struct {
	Builder *AddressMutationBuilder
}

func (trigger *AddressMutationBuilderTrigger) SetBuilder(b *AddressMutationBuilder) {
	trigger.Builder = b
}

type AddressObserver interface {
	SetBuilder(*AddressMutationBuilder)
}

type AddressMutationBuilderObserver struct {
	Builder *AddressMutationBuilder
}

func (observer *AddressMutationBuilderObserver) SetBuilder(b *AddressMutationBuilder) {
	observer.Builder = b
}
