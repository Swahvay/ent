// Code generated by github.com/lolopinto/ent/ent, DO NOT edit. 

package models

{{with .CodePath -}}
import (
  "context"
  "errors"
  "strings"
  "sync"

	"github.com/google/uuid"

  "github.com/lolopinto/ent/ent"
  "github.com/lolopinto/ent/ent/cast"
  "github.com/lolopinto/ent/ent/viewer"

  {{.PathToConfigs}}
)
{{end -}}

{{with .NodeData -}}
{{ $constGroup := .ConstantGroups -}}

{{with .GetSortedConstantGroups -}}

{{ range . -}}
  {{if .CreateNewType -}}
  type {{.ConstType}} string
  {{end -}}
{{end -}}

const (
  {{ range . -}}
    {{$constType := .ConstType -}}
    {{range .GetSortedConstants -}}
      // {{.Comment}}
      {{.ConstName}} {{$constType}} = {{.ConstValue}}
    {{end}}

  {{end -}}
)
{{end -}}

// {{.Node}} represents the `{{.Node}}` model 
type {{.Node}} struct {
  ent.Node
  {{ range $field := .FieldInfo.Fields -}} 
    {{if topLevelStructField $field -}}
      {{$field.FieldName}} {{fTypeString $field}} {{$field.FieldTag}}
    {{end -}}
  {{end -}}
  Viewer viewer.ViewerContext
}


// {{.NodeResult}} stores the result of loading a {{.Node}}. It's a tuple type which has 2 fields: 
// a {{.Node}} and an error
type {{.NodeResult}} struct {
  {{.Node}} *{{.Node}}
  Error error
}

// {{.NodesResult}} stores the result of loading a slice of {{.Node}}s. It's a tuple type which has 2 fields: 
// a {{.NodesSlice}} and an error
type {{.NodesResult}} struct {
  {{.Nodes}} {{.NodesSlice}}
  Error error
}

// IsNode is needed by gqlgen to indicate that this implements the Node interface in GraphQL
func ({{.NodeInstance}} {{.Node}}) IsNode() {}

// GetType returns the NodeType of this entity. In this case: ContactType
func ({{.NodeInstance}} *{{.Node}}) GetType() ent.NodeType {
	return {{.NodeType}}
}

func ({{.NodeInstance}} *{{.Node}}) GetViewer() viewer.ViewerContext {
  return {{.NodeInstance}}.Viewer
}

// GetPrivacyPolicy returns the PrivacyPolicy of this entity. 
func ({{.NodeInstance}} *{{.Node}}) GetPrivacyPolicy() ent.PrivacyPolicy {
  return {{.Node}}PrivacyPolicy{
    {{.Node}}: {{.NodeInstance}},
  }
}

// Load{{.Node}}FromContext loads the given {{.Node}} given the context and id
func Load{{.Node}}FromContext(ctx context.Context, id string) (*{{.Node}}, error) {
  v, err := viewer.ForContext(ctx)
  if err != nil {
    return nil, err
  }
	return Load{{.Node}}(v, id)
}

// Load{{.Node}} loads the given {{.Node}} given the viewer and id
func Load{{.Node}}(viewer viewer.ViewerContext, id string) (*{{.Node}}, error) {
  var {{.NodeInstance}} {{.Node}}
  err := ent.LoadNode(viewer, id, &{{.NodeInstance}}, {{.EntConfig}})
  return &{{.NodeInstance}}, err
}

// GenLoad{{.Node}} loads the given {{.Node}} given the id
func GenLoad{{.Node}}(viewer viewer.ViewerContext, id string, result *{{.NodeResult}}, wg *sync.WaitGroup) {
  defer wg.Done()
  var {{.NodeInstance}} {{.Node}}
  chanErr := make(chan error)
  go ent.GenLoadNode(viewer, id, &{{.NodeInstance}}, {{.EntConfig}}, chanErr)
  err := <-chanErr
  result.{{.Node}} = &{{.NodeInstance}}
  result.Error = err
}

{{/* todo: deal with importing right packages above and circular dependency all that jazz*/}}
{{/* this should be user/factory. user/config? user/query user/privacy etc. */}}
{{with . -}}
  {{$currentNodeInstance := .NodeInstance}}
  {{$currentNode := .Node}}
  {{$currentPackageName := .PackageName}}
  {{with .EdgeInfo}}
    {{range $edge := .FieldEdges -}}
      {{$edgeName := .EdgeName -}}
      {{with .NodeInfo -}}
        // Gen{{$edgeName}} returns the {{$edgeName}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}(result *{{.NodeResult}}, wg *sync.WaitGroup) {
          go GenLoad{{.Node}}({{$currentNodeInstance}}.Viewer, {{$currentNodeInstance}}.{{$edge.FieldName}}, result, wg )
        }

        // Load{{$edgeName}} returns the {{$edgeName}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() (*{{.Node}}, error) {
          return Load{{.Node}}({{$currentNodeInstance}}.Viewer, {{$currentNodeInstance}}.{{$edge.FieldName}})
        }
      {{end}}
    {{end}}
    {{range $edge := .ForeignKeys -}}
      {{$edgeName := .EdgeName -}}
      {{with .NodeInfo -}}
        // Gen{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}(result *{{.NodesResult}}, wg *sync.WaitGroup) {
          defer wg.Done()
          var {{.NodeInstance}}s {{.NodesSlice}}
          chanErr := make(chan error)
          go ent.GenLoadForeignKeyNodes({{$currentNodeInstance}}.Viewer, {{$currentNodeInstance}}.ID, &{{.NodeInstance}}s, "{{$currentPackageName}}_id", {{.EntConfig}}, chanErr)
          err := <-chanErr
          result.{{.Nodes}} = {{.NodeInstance}}s
          result.Error = err
        }

        // Load{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() ({{.NodesSlice}}, error) {
          var {{.NodeInstance}}s {{.NodesSlice}}
          err := ent.LoadForeignKeyNodes({{$currentNodeInstance}}.Viewer, {{$currentNodeInstance}}.ID, &{{.NodeInstance}}s, "{{$currentPackageName}}_id", {{.EntConfig}})
          return {{.NodeInstance}}s, err
        }
      {{end}}
    {{end}}
    {{range $edge := .Associations -}}
      {{$edgeName := .EdgeName -}}
      {{with .NodeInfo -}}
        // Gen{{$edgeName}}Edges returns the {{.Node}} edges associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}Edges(chanEdgesResult chan<- ent.EdgesResult) {
          go ent.GenLoadEdgesByTypeResult({{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, chanEdgesResult)
        }

        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}ByType(id2 string) (*ent.Edge, error) {
          return ent.LoadEdgeByType({{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, id2)
        }

        // Gen{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}(result *{{.NodesResult}}, wg *sync.WaitGroup) {
          defer wg.Done()
          var {{.NodeInstance}}s {{.NodesSlice}}
          chanErr := make(chan error)
          go ent.GenLoadNodesByType({{$currentNodeInstance}}.Viewer, {{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, &{{.NodeInstance}}s, {{.EntConfig}}, chanErr)
          err := <-chanErr
          result.{{.Nodes}} = {{.NodeInstance}}s
          result.Error = err
        }

        // Load{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() ({{.NodesSlice}}, error) {
          var {{.NodeInstance}}s {{.NodesSlice}}
          err := ent.LoadNodesByType({{$currentNodeInstance}}.Viewer, {{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, &{{.NodeInstance}}s, {{.EntConfig}})
          return {{.NodeInstance}}s, err
        }
      {{end}}
    {{end }}

    {{range $assocEdgeGroup := .AssocGroups -}}
      {{- $const := $assocEdgeGroup.ConstType -}}
      {{$funcName := $assocEdgeGroup.GetStatusFuncName -}}
      func ({{$currentNodeInstance}} *{{$currentNode}}) {{$funcName}}() (*{{$const}}, error) {
        if !{{$currentNodeInstance}}.Viewer.HasIdentity() {
          // TODO add CANNOT_RSVP enum 
          ret := EventInvitees
      		return &ret, nil
        }
        statusMap := {{$currentNodeInstance}}.{{$funcName}}Map()
        edges := make(map[string]*ent.Edge)
        errs := make(map[string]error)
        for key, data := range statusMap {
          // TODO concurrent versions
          edges[key], errs[key] = ent.LoadEdgeByType({{$currentNodeInstance}}.ID, data.Edge, {{$currentNodeInstance}}.Viewer.GetViewerID())
        }
        for _, err := range errs {
          if err != nil {
            return nil, err
          }
        }
        var ret {{$const}}
        for key, edge := range edges {
          // TODO better zero value behavior at some point
      		if edge != nil && edge.ID1 != "" {
            var ok bool
            ret, ok = statusMap[key].ConstName.({{$const}})
            if !ok {
      				return nil, errors.New("error casting constant to {{$const}}")
      			}
            break
          }
        }
        return &ret, nil
      }

      func ({{$currentNodeInstance}} *{{$currentNode}}) {{$funcName}}ForGQL() (*string, error) {
        enum, err := {{$currentNodeInstance}}.{{$assocEdgeGroup.GetStatusFuncName}}()
        if err != nil {
          return nil, err
        }
        str := string(*enum)
        return &str, nil
      }

      // TODO remove ViewerFrom this
      func ({{$currentNodeInstance}} *{{$currentNode}}) {{$funcName}}Map() ent.AssocStatusMap {
        {{ $constInfo := index $constGroup $const -}}
        return ent.AssocStatusMap {
        {{ range $assocEdge := $assocEdgeGroup.Edges -}}
          {{ $edgeName := $assocEdge.EdgeName -}}
          {{ $constName := $assocEdgeGroup.GetConstNameForEdgeName $edgeName -}}
          {{ $constInfo := index $constInfo.Constants $constName -}}
          {{ $constInfo.ConstValue}}: &ent.AssociationEdgeGroupStatusInfo{
            EdgeName: "{{$edgeName}}",
            Edge: {{$assocEdge.EdgeConst}},
            ConstName: {{$constName}},
            UseInStatusMutation: true,
          },
        {{ end -}}
        }
      }
    {{ end -}}
  {{end}}

func ({{$currentNodeInstance}} *{{$currentNode}}) DBFields() ent.DBFields {
  return ent.DBFields {
    "id": func(v interface{}) error {
      var err error
      {{$currentNodeInstance}}.ID, err = cast.ToUUIDString(v)
      return err
    },
    {{ range $field := .FieldInfo.Fields -}}
      {{if topLevelStructField $field -}}
        "{{$field.GetDbColName}}": func(v interface{}) error {
          var err error
          {{$currentNodeInstance}}.{{$field.FieldName}}, err = {{$field.GetCastToMethod}}(v)
          return err
        },
      {{end -}}
    {{end -}}
  }
}

{{end}}

var _ ent.Entity = &{{.Node}}{}

{{end -}}
