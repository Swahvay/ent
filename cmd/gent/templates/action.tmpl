{{ reserveImport "context"}} 

{{ reserveImport "github.com/lolopinto/ent/ent" }}
{{ reserveImport "github.com/lolopinto/ent/ent/actions" }}
{{ reserveImport "github.com/lolopinto/ent/ent/viewer" }}

{{with .CodePath -}}

	{{reserveImport .PathToModels}}
  {{reserveImport .PathToConfigs}}

{{end -}}

{{$action := .Action -}}
{{$actionName := actionName $action}}
{{$embeddedActionType := embeddedActionType $action}}
{{$nodeInfo := nodeInfo $action -}}

type {{$actionName}} struct {
  {{$embeddedActionType}}
}

{{$actionMethodName := actionMethodName $action}}

// {{$actionMethodName}}FromContext is the factory method to get an ...
func {{$actionMethodName}}FromContext( {{actionMethodContextArgs $action}}) *{{$actionName}} {
  v, err := viewer.ForContext(ctx)
	if err != nil {
    panic("tried to perform mutation without a viewer")
	}
  return {{$actionMethodName}}({{argsToViewerMethod $action}})
}

// {{$actionMethodName}} is the factory method to get an ...
func {{$actionMethodName}}( {{actionMethodArgs $action}}) *{{$actionName}} {
  return &{{$actionName}}{
    {{embeddedActionType $action}}{
      {{ range paramsToEmbeddedType $action -}}
        {{.}}
      {{ end -}}
    },
  }
}

{{$fields := fields $action}}

{{ range $field := $fields -}}
// {{$field.MethodName}} sets the {{$field.FieldName}} while editing the {{$nodeInfo.Node}} ent 
func (action *{{$actionName}}) {{$field.MethodName}}({{$field.InstanceName}} {{$field.InstanceType}}) *{{$actionName}} {
  action.SetField({{$field.QuotedFieldName}}, {{$field.InstanceName}})
  {{$inverseEdge := $field.InverseEdge -}}
   {{ if $inverseEdge -}}
    {{$edgeNodeInfo := $inverseEdge.NodeInfo -}}
    {{/* TODO time and data support later */ -}}  
    action.AddInboundEdge(models.{{$inverseEdge.EdgeConst}}, {{$field.InstanceName}}, models.{{$edgeNodeInfo.NodeType}})
  {{ end -}}
  return action
}

{{end -}}


{{ if $fields -}}
// GetFields returns the fields that could be edited in this mutation
func (action *{{$actionName}}) GetFieldMap() ent.ActionFieldMap {
  return ent.ActionFieldMap {
    {{ range $field := $fields -}}
      {{$field.QuotedFieldName}}: &ent.MutatingFieldInfo {
        DB: {{$field.QuotedDBName}},
        Required: true,
      },
    {{end -}}
  }
}

{{end -}}


// Save is the method called to execute this action and save change
func (action * {{$actionName}}) Save() {{saveActionType $action}} {
  {{ if returnsObjectInstance $action -}}
    var {{$nodeInfo.NodeInstance}} models.{{$nodeInfo.Node}}
    err := action.SaveAction(&{{$nodeInfo.NodeInstance}}, action.GetFieldMap())
    return &{{$nodeInfo.NodeInstance}}, err
  {{else -}}
    return action.SaveAction()
  {{end -}}
}

{{ if returnsObjectInstance $action -}}
var _ actions.ActionMutator = &{{$actionName}}{}
{{end -}}

