// Code generated by github.com/lolopinto/ent/ent, DO NOT edit.

package models

import (
	"context"
	"time"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/cast"
	"github.com/lolopinto/ent/ent/viewer"
)

const (
	// EventType is the node type for the Event object. Used to identify this node in edges and other places.
	EventType ent.NodeType = "event"
)

// Event represents the `Event` model
type Event struct {
	ent.Node
	Name      string    `db:"name"`
	UserID    string    `db:"user_id"`
	StartTime time.Time `db:"start_time"`
	EndTime   time.Time `db:"end_time"`
	Location  string    `db:"location"`
	Viewer    viewer.ViewerContext
}

// EventResult stores the result of loading a Event. It's a tuple type which has 2 fields:
// a Event and an error
type EventResult struct {
	Event *Event
	Error error
}

// EventsResult stores the result of loading a slice of Events. It's a tuple type which has 2 fields:
// a []*Event and an error
type EventsResult struct {
	Events []*Event
	Error  error
}

// IsNode is needed by gqlgen to indicate that this implements the Node interface in GraphQL
func (event Event) IsNode() {}

// GetType returns the NodeType of this entity. In this case: ContactType
func (event *Event) GetType() ent.NodeType {
	return EventType
}

// GetPrivacyPolicy returns the PrivacyPolicy of this entity.
func (event *Event) GetPrivacyPolicy() ent.PrivacyPolicy {
	return EventPrivacyPolicy{
		Event: event,
	}
}

// LoadEventFromContext loads the given Event given the context and id
func LoadEventFromContext(ctx context.Context, id string) (*Event, error) {
	v, err := viewer.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	return LoadEvent(v, id)
}

// LoadEvent loads the given Event given the viewer and id
func LoadEvent(viewer viewer.ViewerContext, id string) (*Event, error) {
	var event Event
	err := ent.LoadNode(viewer, id, &event, &configs.EventConfig{})
	return &event, err
}

// GenLoadEvent loads the given Event given the id
func GenLoadEvent(viewer viewer.ViewerContext, id string, chanEventResult chan<- EventResult) {
	var event Event
	chanErr := make(chan error)
	go ent.GenLoadNode(viewer, id, &event, &configs.EventConfig{}, chanErr)
	err := <-chanErr
	chanEventResult <- EventResult{
		Event: &event,
		Error: err,
	}
}

// GenUser returns the User associated with the Event instance
func (event *Event) GenUser(chanUserResult chan<- UserResult) {
	go GenLoadUser(event.Viewer, event.UserID, chanUserResult)
}

// LoadUser returns the User associated with the Event instance
func (event *Event) LoadUser() (*User, error) {
	return LoadUser(event.Viewer, event.UserID)
}

func (event *Event) FillFromMap(data map[string]interface{}) error {
	for k, v := range data {
		var err error
		switch k {
		case "id":
			event.ID, err = cast.ToUUIDString(v)
			if err != nil {
				return err
			}
			break
		case "name":
			event.Name, err = cast.ToString(v)
			if err != nil {
				return err
			}
			break
		case "user_id":
			event.UserID, err = cast.ToString(v)
			if err != nil {
				return err
			}
			break
		case "start_time":
			event.StartTime, err = cast.ToTime(v)
			if err != nil {
				return err
			}
			break
		case "end_time":
			event.EndTime, err = cast.ToTime(v)
			if err != nil {
				return err
			}
			break
		case "location":
			event.Location, err = cast.ToString(v)
			if err != nil {
				return err
			}
			break
		}
	}
	return nil
}

var _ ent.Entity = &Event{}
