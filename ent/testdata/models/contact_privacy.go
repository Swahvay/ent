// Code generated by github.com/lolopinto/ent/ent, DO NOT edit.

package models

import (
	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/privacy"
	"github.com/lolopinto/ent/ent/viewer"
)

// ContactPrivacyPolicy is the privacy policy for the Contact ent which helps decides if it's
// visible to the viewer
type ContactPrivacyPolicy struct {
	Contact *Contact
}

// Rules is the list of rules that decides the visibility of the Contact ent to the viewer
func (policy ContactPrivacyPolicy) Rules() []ent.PrivacyPolicyRule {
	return []ent.PrivacyPolicyRule{
		privacy.AllowIfOmniscientRule{},
		// BEGIN MANUAL SECTION: Add custom privacy rules below
		// END MANUAL SECTION of privacy rules
		privacy.AlwaysDenyRule{},
	}
}

// AllowIfViewerCanSeeContactRule is a reusable rule that can be called by different ents to see if the contact can be visible
type AllowIfViewerCanSeeContactRule struct {
	ContactID string
}

// GenEval evaluates that the ent is visible to the user
func (rule AllowIfViewerCanSeeContactRule) GenEval(viewer viewer.ViewerContext, entity interface{}, privacyResultChan chan<- ent.PrivacyResult) {
	entResultChan := make(chan ContactResult)
	go GenLoadContact(viewer, rule.ContactID, entResultChan)
	entResult := <-entResultChan

	if entResult.Error != nil {
		privacyResultChan <- ent.SkipPrivacyResult
	} else {
		privacyResultChan <- ent.AllowPrivacyResult
	}
}
