# Code generated by github.com/lolopinto/ent/ent, DO NOT edit. 


interface Connection {
    edges: [Edge!]
    nodes: [Node!]
}

type Contact implements Node {
    allowList: [User!]!
    emailAddress: String!
    firstName: String!
    id: ID!
    lastName: String!
    userID: String!
}

interface Edge {
    node: Node!
}

type Event implements Node {
    attending: [User!]!
    creator: [User!]!
    declined: [User!]!
    endTime: Time!
    hosts: [User!]!
    id: ID!
    invited: [User!]!
    location: String!
    name: String!
    startTime: Time!
    user: User
    viewerRsvpStatus: EventRsvpStatus
}

enum EventRsvpStatus {
    EVENT_ATTENDING
    EVENT_DECLINED
    EVENT_INVITED
    EVENT_UNKNOWN
}

type EventsConnection implements Connection {
    edges: [EventsEdge!]
    nodes: [Event!]
}

type EventsEdge implements Edge {
    node: Event!
}

type Mutation {
    userAddFriends(input: UserAddFriendsInput!): UserAddFriendsResponse
    userCreate(input: UserCreateInput!): UserCreateResponse
    userDelete(input: UserDeleteInput!): UserDeleteResponse
    userEdit(input: UserEditInput!): UserEditResponse
    userRemoveFamilyMembers(input: UserRemoveFamilyMembersInput!): UserRemoveFamilyMembersResponse
}

interface Node {
    id: ID!
}

type Query {
    contact(id: ID!): Contact
    event(id: ID!): Event
    user(id: ID!): User
}

type User implements Node {
    contacts: [Contact!]!
    declinedEvents: [Event!]!
    emailAddress: String!
    events: [Event!]!
    eventsAttending: [Event!]!
    familyMembers: [User!]!
    firstName: String!
    friends: [User!]!
    id: ID!
    invitedEvents: [Event!]!
    lastName: String!
}

input UserAddFriendsInput {
    friendsID: ID!
    userID: ID!
}

type UserAddFriendsResponse {
    user: User
}

input UserCreateInput {
    emailAddress: String!
    firstName: String!
    lastName: String!
}

type UserCreateResponse {
    user: User
}

input UserDeleteInput {
    userID: ID!
}

type UserDeleteResponse {
    deletedUserId: ID
}

input UserEditInput {
    emailAddress: String!
    firstName: String!
    lastName: String!
    userID: ID!
}

type UserEditResponse {
    user: User
}

input UserRemoveFamilyMembersInput {
    familyMembersID: ID!
    userID: ID!
}

type UserRemoveFamilyMembersResponse {
    user: User
}

type UsersConnection implements Connection {
    edges: [UsersEdge!]
    nodes: [User!]
}

type UsersEdge implements Edge {
    node: User!
}


scalar Time
